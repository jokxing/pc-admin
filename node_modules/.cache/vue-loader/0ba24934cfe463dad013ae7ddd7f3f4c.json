{"remainingRequest":"G:\\bm_admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!G:\\bm_admin\\src\\views\\promotionZone\\generatePicture.vue?vue&type=script&lang=js&","dependencies":[{"path":"G:\\bm_admin\\src\\views\\promotionZone\\generatePicture.vue","mtime":1608557392000},{"path":"G:\\bm_admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"G:\\bm_admin\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"G:\\bm_admin\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"G:\\bm_admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"G:\\bm_admin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}