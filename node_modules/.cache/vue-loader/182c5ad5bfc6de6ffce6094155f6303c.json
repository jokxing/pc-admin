{"remainingRequest":"L:\\bm_admin\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!L:\\bm_admin\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!L:\\bm_admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!L:\\bm_admin\\src\\views\\home\\home.vue?vue&type=template&id=39f87be5&scoped=true&","dependencies":[{"path":"L:\\bm_admin\\src\\views\\home\\home.vue","mtime":1611747310000},{"path":"L:\\bm_admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"L:\\bm_admin\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"L:\\bm_admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"L:\\bm_admin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgImRpdiIsCiAgICB7IHN0YXRpY0NsYXNzOiAiaG9tZSIgfSwKICAgIFsKICAgICAgX2MoCiAgICAgICAgImVsLXJvdyIsCiAgICAgICAgeyBzdGF0aWNDbGFzczogImhvbWVfdG9wIiwgYXR0cnM6IHsgZ3V0dGVyOiAxMCB9IH0sCiAgICAgICAgWwogICAgICAgICAgX2MoImg0IiwgeyBzdGF0aWNDbGFzczogInRpdGxlIiB9LCBbX3ZtLl92KCLmnKzmnIjmlbDmja7mpoLop4giKV0pLAogICAgICAgICAgX2MoImVsLWNvbCIsIFsKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJiZyIgfSwgWwogICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInByaW1hcnktY29sb3IiIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJpIiwgewogICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgbmFtZTogInNob3ciLAogICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtc2hvdyIsCiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLmRhdGFMb2FkaW5nLAogICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogImRhdGFMb2FkaW5nIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJlbC1pY29uLWxvYWRpbmciCiAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgIF92bS5fdigiICIgKyBfdm0uX3MoX3ZtLmhvbWVEYXRhLnJlZ2lzdGVyX3VzZXIpICsgIiAiKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJzcGFuIiwgW192bS5fdigi5rOo5YaM5Lya5ZGYKOacrOaciCkiKV0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJlbC1jb2wiLCBbCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiYmciIH0sIFsKICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJwcmltYXJ5LWNvbG9yIiB9LCBbCiAgICAgICAgICAgICAgICBfYygiaSIsIHsKICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJzaG93IiwKICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LXNob3ciLAogICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5kYXRhTG9hZGluZywKICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJkYXRhTG9hZGluZyIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZWwtaWNvbi1sb2FkaW5nIgogICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICBfdm0uX3YoIiAiICsgX3ZtLl9zKF92bS5ob21lRGF0YS52YWxpZF91c2VyKSArICIgIikKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJzcGFuIiwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KCIg5pyJ5pWI5Lya5ZGYKOacrOaciCkgIiksCiAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICJlbC10b29sdGlwIiwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIml0ZW0iLAogICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgZWZmZWN0OiAiZGFyayIsCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6ICLmnKzmnIjms6jlhozvvIzlrZjmrL41MDDku6XkuIrvvIzmtYHmsLQyMDAw5Lul5LiKIiwKICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2VtZW50OiAiYm90dG9tIgogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgW19jKCJpIiwgeyBzdGF0aWNDbGFzczogImVsLWljb24taW5mbyIgfSldCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygiZWwtY29sIiwgWwogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImJnIiB9LCBbCiAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAicHJpbWFyeS1jb2xvciIgfSwgWwogICAgICAgICAgICAgICAgX2MoImkiLCB7CiAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAic2hvdyIsCiAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1zaG93IiwKICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0uZGF0YUxvYWRpbmcsCiAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiZGF0YUxvYWRpbmciCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImVsLWljb24tbG9hZGluZyIKICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgX3ZtLl92KCIgIiArIF92bS5fcyhfdm0uaG9tZURhdGEudXNlcl9udW0pICsgIiAiKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgInNwYW4iLAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoIiDmtLvot4PkurrmlbAo5pys5pyIKSAiKSwKICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgImVsLXRvb2x0aXAiLAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaXRlbSIsCiAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICBlZmZlY3Q6ICJkYXJrIiwKICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogIuacrOaciOeZu+W9lei/h+eahOeOqeWutiIsCiAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlbWVudDogImJvdHRvbSIKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIFtfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJlbC1pY29uLWluZm8iIH0pXQogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImVsLWNvbCIsIFsKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJiZyBsYXN0IiB9LCBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAicCIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGNsYXNzOiB7CiAgICAgICAgICAgICAgICAgICAgInByaW1hcnktY29sb3IiOiBfdm0uaG9tZURhdGEucGF5b3V0ID49IDAsCiAgICAgICAgICAgICAgICAgICAgcmVkOiBfdm0uaG9tZURhdGEucGF5b3V0IDwgMAogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygiaSIsIHsKICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJzaG93IiwKICAgICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtc2hvdyIsCiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0uZGF0YUxvYWRpbmcsCiAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJkYXRhTG9hZGluZyIKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZWwtaWNvbi1sb2FkaW5nIHByaW1hcnktY29sb3IiCiAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICBfdm0uX3YoIiAiICsgX3ZtLl9zKF92bS5ob21lRGF0YS5wYXlvdXQpICsgIiAiKQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAic3BhbiIsCiAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAicHJpbWFyeS1iZyIgfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KCIg5a6e6ZmF55uI5LqPICIpLAogICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAiZWwtdG9vbHRpcCIsCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJpdGVtIiwKICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIGVmZmVjdDogImRhcmsiLAogICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiAi6LSf5pWw5Luj6KGo546p5a626L6T6ZKx77yM5q2j5pWw5Luj6KGo546p5a626LWi6ZKxIiwKICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2VtZW50OiAiYm90dG9tIgogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgX2MoImkiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZWwtaWNvbi1pbmZvIiwKICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsgY29sb3I6ICIjZmZmIiB9CiAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5iaWxsX3d0ZAogICAgICAgICAgICA/IF9jKAogICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiY29tbWlzc2lvbl9yYXRlIiB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygiZWwtcHJvZ3Jlc3MiLCB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICJkYXNoYm9hcmQiLAogICAgICAgICAgICAgICAgICAgICAgcGVyY2VudGFnZTogX3ZtLmhvbWVEYXRhLnJhdGUsCiAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogIiM1QzdERUMiLAogICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDE5MAogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgIF9jKCJwIiwgW192bS5fdigi5L2j6YeR5q+U5L6LIildKQogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICApCiAgICAgICAgICAgIDogX3ZtLl9lKCkKICAgICAgICBdLAogICAgICAgIDEKICAgICAgKSwKICAgICAgX2MoCiAgICAgICAgImVsLXJvdyIsCiAgICAgICAgewogICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgbmFtZTogImxvYWRpbmciLAogICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWxvYWRpbmciLAogICAgICAgICAgICAgIHZhbHVlOiBfdm0ucmVwb3JMb2FkaW5nLAogICAgICAgICAgICAgIGV4cHJlc3Npb246ICJyZXBvckxvYWRpbmciCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICBzdGF0aWNDbGFzczogImhvbWVfYm90IgogICAgICAgIH0sCiAgICAgICAgWwogICAgICAgICAgX2MoImg0IiwgeyBzdGF0aWNDbGFzczogInRpdGxlIiB9LCBbX3ZtLl92KCLmlbDmja7lr7nmr5QiKV0pLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiZGF0ZSIgfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKCJlbC1kYXRlLXBpY2tlciIsIHsKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIHR5cGU6ICJtb250aCIsCiAgICAgICAgICAgICAgICAgIGFsaWduOiAicmlnaHQiLAogICAgICAgICAgICAgICAgICAicGlja2VyLW9wdGlvbnMiOiBfdm0ucGlja2VyT3B0aW9ucywKICAgICAgICAgICAgICAgICAgInZhbHVlLWZvcm1hdCI6ICJ5eXl5LU1NIiwKICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICLpgInmi6nmnIgiCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgY2hhbmdlOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLmluZGV4UmVwb3J0RGF0YSgiaXNEYXRlIikKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIG1vZGVsOiB7CiAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0ubW9udGgsCiAgICAgICAgICAgICAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbigkJHYpIHsKICAgICAgICAgICAgICAgICAgICBfdm0ubW9udGggPSAkJHYKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIm1vbnRoIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0pCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgICBfYygKICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJtb25leV90YWIiIH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJlbC10b29sdGlwIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJpdGVtIiwKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgZWZmZWN0OiAiZGFyayIsIHBsYWNlbWVudDogInJpZ2h0IiB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogeyAibGluZS1oZWlnaHQiOiAiMThweCIgfSwKICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHNsb3Q6ICJjb250ZW50IiB9LAogICAgICAgICAgICAgICAgICAgICAgc2xvdDogImNvbnRlbnQiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIuaWsOazqOWGjOWtmOasvumHkemine+8muaXtumXtOauteWGheazqOWGjOeUqOaIt+eahOe0ryIpLAogICAgICAgICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIuiuoeWtmOasvumHkeminSIpLAogICAgICAgICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIuiAgeeUqOaIt+WtmOasvumHkemine+8muaJgOmAieaXtumXtOS5i+WJjeazqOWGjOeUqOaItywiKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCLlnKjlvZPliY3miYDpgInml7bpl7TlhoXlrZjmrL7nmoTph5Hpop0iKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCLpppblrZjph5Hpop3vvJrmiYDpgInml7bpl7TlhoXms6jlhoznlKjmiLfnmoTpppbmrKHlrZgiKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCLmrL7ph5Hpop0iKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCLmgLvlrZjmrL7ph5Hpop3vvJrmiYDpgInml7bpl7TlhoXnlKjmiLfnmoTntK/orqHlrZjmrL4iKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCLph5Hpop0iKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCLmipXms6jph5Hpop3vvJrmiYDpgInml7bpl7TlhoXnlKjmiLfnmoTntK/orqHmipXms6jph5EiKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCLpop0iKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCLmnInmlYjmipXms6jvvJrmiYDpgInml7bpl7TlhoXnlKjmiLfnmoTntK/orqHmnInmlYjmipUiKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCLms6jph5Hpop0iKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCLovpPotaLvvJrmiYDpgInml7bpl7TlhoXnlKjmiLfnmoTntK/orqHovpPotaIgIikKICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgIF9jKCJpIiwgeyBzdGF0aWNDbGFzczogImVsLWljb24taW5mbyIgfSkKICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgICBzdGF0aWNTdHlsZTogeyB3aWR0aDogIjEwMCUiLCBoZWlnaHQ6ICI0MDBweCIgfSwKICAgICAgICAgICAgYXR0cnM6IHsgaWQ6ICJjaGFydExpbmUiIH0KICAgICAgICAgIH0pLAogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJkYXRhX3RhYiIgfSwgWwogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAidWwiLAogICAgICAgICAgICAgIF92bS5fbChfdm0uZGF0YVRhYiwgZnVuY3Rpb24oaXRlbSwgaW5kZXgpIHsKICAgICAgICAgICAgICAgIHJldHVybiBfYygKICAgICAgICAgICAgICAgICAgImxpIiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGtleTogaW5kZXgsCiAgICAgICAgICAgICAgICAgICAgY2xhc3M6IHsgYm9yX2FjdGl2ZTogX3ZtLmRhdGFUYWJOdW0gPT0gaW5kZXggfSwKICAgICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLmRhdGFUYWJDbGljayhpdGVtLCBpbmRleCkKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFtfYygic3BhbiIpLCBfdm0uX3YoIiAiICsgX3ZtLl9zKGl0ZW0pICsgIiAiKV0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAwCiAgICAgICAgICAgICkKICAgICAgICAgIF0pCiAgICAgICAgXQogICAgICApCiAgICBdLAogICAgMQogICkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gW10KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}