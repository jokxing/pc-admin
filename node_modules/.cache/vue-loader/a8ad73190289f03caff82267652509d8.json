{"remainingRequest":"D:\\vue\\pc_admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\vue\\pc_admin\\src\\views\\reportCenter\\userReport.vue?vue&type=template&id=85bc8f4a&scoped=true&","dependencies":[{"path":"D:\\vue\\pc_admin\\src\\views\\reportCenter\\userReport.vue","mtime":1639657714000},{"path":"D:\\vue\\pc_admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\vue\\pc_admin\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\vue\\pc_admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\vue\\pc_admin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}