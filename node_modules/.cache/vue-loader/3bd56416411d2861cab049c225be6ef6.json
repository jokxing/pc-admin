{"remainingRequest":"L:\\bm_admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!L:\\bm_admin\\src\\views\\reportCenter\\userReport.vue?vue&type=template&id=4e0ab596&scoped=true&","dependencies":[{"path":"L:\\bm_admin\\src\\views\\reportCenter\\userReport.vue","mtime":1604901124000},{"path":"L:\\bm_admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"L:\\bm_admin\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"L:\\bm_admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"L:\\bm_admin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}