{"remainingRequest":"L:\\bm_admin\\node_modules\\thread-loader\\dist\\cjs.js!L:\\bm_admin\\node_modules\\babel-loader\\lib\\index.js!L:\\bm_admin\\src\\assets\\js\\TCaptcha.js","dependencies":[{"path":"L:\\bm_admin\\src\\assets\\js\\TCaptcha.js","mtime":1594180618000},{"path":"L:\\bm_admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"L:\\bm_admin\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"L:\\bm_admin\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}