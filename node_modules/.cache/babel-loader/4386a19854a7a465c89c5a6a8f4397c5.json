{"remainingRequest":"D:\\vue3\\bf_admin\\node_modules\\thread-loader\\dist\\cjs.js!D:\\vue3\\bf_admin\\node_modules\\babel-loader\\lib\\index.js!D:\\vue3\\bf_admin\\src\\assets\\js\\TCaptcha.js","dependencies":[{"path":"D:\\vue3\\bf_admin\\src\\assets\\js\\TCaptcha.js","mtime":1594180617623},{"path":"D:\\vue3\\bf_admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\vue3\\bf_admin\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\vue3\\bf_admin\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}