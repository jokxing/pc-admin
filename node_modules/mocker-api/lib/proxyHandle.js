"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.proxyHandle = void 0;
const url_1 = __importDefault(require("url"));
const http_proxy_1 = __importDefault(require("http-proxy"));
const safe_1 = __importDefault(require("colors-cli/safe"));
function proxyHandle(req, res, options = {}, proxyKey) {
    const currentProxy = options.proxy[proxyKey];
    const url = url_1.default.parse(currentProxy);
    if (options.changeHost) {
        req.headers.host = url.host;
    }
    const { options: proxyOptions = {}, listeners: proxyListeners = {} } = options.httpProxy;
    /**
     * rewrite target's url path. Object-keys will be used as RegExp to match paths.
     * https://github.com/jaywcjlove/mocker-api/issues/62
     */
    Object.keys(options.pathRewrite).forEach(rgxStr => {
        const rePath = req.path.replace(new RegExp(rgxStr), options.pathRewrite[rgxStr]);
        const currentPath = [rePath];
        if (req.url.indexOf('?') > 0) {
            currentPath.push(req.url.replace(/(.*)\?/, ''));
        }
        req.query = url_1.default.parse(req.url, true).query;
        req.url = req.originalUrl = currentPath.join('?');
    });
    const proxyHTTP = http_proxy_1.default.createProxyServer({});
    proxyHTTP.on('error', (err) => {
        console.error(`${safe_1.default.red_b.black(` Proxy Failed: ${err.name}`)} ${err.message || ''} ${err.stack || ''} !!`);
    });
    Object.keys(proxyListeners).forEach(event => {
        proxyHTTP.on(event, proxyListeners[event]);
    });
    proxyHTTP.web(req, res, Object.assign({ target: url.href }, proxyOptions));
}
exports.proxyHandle = proxyHandle;
//# sourceMappingURL=proxyHandle.js.map