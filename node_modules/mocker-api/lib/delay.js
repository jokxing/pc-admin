"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * You can use functional tool to enhance mock. [#17](https://github.com/jaywcjlove/webpack-api-mocker/issues/17)
 *
 * ```js
 * const delay = require('mocker-api/lib/delay');
 * const noProxy = process.env.NO_PROXY === 'true';
 *
 * const proxy = {
 *   'GET /api/user': {
 *     id: 1,
 *     username: 'kenny',
 *     sex: 6
 *   },
 *   // ...
 * }
 * module.exports = (noProxy ? {} : delay(proxy, 1000));
 * ```
 */
module.exports = delay;
function delay(proxy, timer = 0) {
    const mockApi = {};
    Object.keys(proxy).forEach((key) => {
        const result = proxy[key];
        if ((Object.prototype.toString.call(result) === '[object String]' && /^http/.test(result)) || key === '_proxy' || timer === 0) {
            mockApi[key] = proxy[key];
        }
        else {
            mockApi[key] = function (req, res) {
                let foo;
                if (Object.prototype.toString.call(result) === '[object Function]') {
                    foo = result;
                }
                else {
                    foo = (_req, _res) => {
                        return _res.json(result);
                    };
                }
                setTimeout(() => {
                    foo(req, res);
                }, timer);
            };
        }
    });
    return mockApi;
}
exports.default = delay;
//# sourceMappingURL=delay.js.map