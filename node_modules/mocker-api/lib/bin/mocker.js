#!/usr/bin/env node
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const fs_1 = require("fs");
const prepareUrls_1 = __importDefault(require("local-ip-url/prepareUrls"));
const detect_port_1 = __importDefault(require("detect-port"));
const safe_1 = __importDefault(require("colors-cli/safe"));
const express_1 = __importDefault(require("express"));
const minimist_1 = __importDefault(require("minimist"));
const __1 = __importDefault(require("../"));
const CWD = process.cwd();
const PKG_PATH = path_1.default.resolve(CWD, './package.json');
const DEFAULT_MOCKER_CONFIG_PATH = path_1.default.resolve(CWD, './mocker.config.json');
const DEFAULT_MOCK_PATH = ['./mock'];
const DEFAULT_CONFIG = {
    host: '0.0.0.0',
    port: 3721
};
(async () => {
    const argvs = (0, minimist_1.default)(process.argv.slice(2));
    if (argvs.h || argvs.help) {
        console.log('\n  Usage: mocker <path> [--config] [--help|h]');
        console.log('\n  Displays help information.');
        console.log('\n  Options:');
        console.log('    --config <path>', 'Simple configuration');
        console.log('\n  Example:');
        console.log('    mocker mock/index.js');
        console.log('    mocker mock/index.js --port 7788');
        console.log('    mocker mock/index.js --host 0.0.0.0');
        console.log('    mocker mock/m1.js test/m2.js');
        console.log('    mocker mock/m1.js --config mocker.config.json');
        console.log('\n');
        return;
    }
    // Fix type errors
    const { version } = require('../../package.json');
    if (argvs.v || argvs.version) {
        console.log(version);
        return;
    }
    const paths = argvs['_'];
    if (paths.length === 0) {
        console.log(safe_1.default.red('Error: Need to pass parameters!'));
        console.log(`E.g: ${safe_1.default.yellow('mocker <File path>')}\n`);
        return;
    }
    const entryFiles = paths || DEFAULT_MOCK_PATH;
    let mockConfigPath = argvs.config || DEFAULT_MOCKER_CONFIG_PATH;
    let mockerConfig = DEFAULT_CONFIG;
    if (argvs.config) {
        mockConfigPath = argvs.config;
    }
    if (!(0, fs_1.existsSync)(path_1.default.resolve(mockConfigPath))) {
        mockerConfig.host = process.env.HOST ? process.env.HOST : mockerConfig.host;
        mockerConfig.port = await (0, detect_port_1.default)(mockerConfig.port);
    }
    else {
        mockerConfig = require(path_1.default.resolve(mockConfigPath));
    }
    /**
     * Support setting configuration on package.json
     * https://github.com/jaywcjlove/mocker-api/issues/144
     */
    if ((0, fs_1.existsSync)(PKG_PATH)) {
        const pkgConf = require(PKG_PATH);
        if (pkgConf.mocker) {
            Object.assign(mockerConfig, pkgConf.mocker);
        }
    }
    if (argvs.host) {
        mockerConfig.host = argvs.host;
    }
    if (argvs.port) {
        mockerConfig.port = argvs.port;
    }
    const DEFAULT_PORT = mockerConfig.port;
    const DEFAULT_HOST = mockerConfig.host;
    const app = (0, express_1.default)();
    app.all('/*', (req, res, next) => {
        console.log(`${safe_1.default.green(req.method)} - ${req.url}`);
        res.header('Access-Control-Allow-Origin', '*');
        res.header('Access-Control-Allow-Headers', 'Content-Type,Content-Length,Authorization,Accept,X-Requested-With');
        res.header('Access-Control-Allow-Methods', 'PUT,POST,GET,DELETE,OPTIONS');
        next();
    });
    delete mockerConfig.port;
    delete mockerConfig.host;
    (0, __1.default)(app, entryFiles, { ...mockerConfig });
    app.listen(DEFAULT_PORT, () => {
        const localIpUrl = (0, prepareUrls_1.default)({
            protocol: 'http',
            host: DEFAULT_HOST,
            port: DEFAULT_PORT,
        });
        console.log(`> Server Listening at Local: ${safe_1.default.green(localIpUrl.localUrl)}`);
        console.log(`>           On Your Network: ${safe_1.default.green(localIpUrl.lanUrl)}\n`);
    });
    /**
     * Event listener for HTTP server "error" event.
     */
    app.on('error', (error) => {
        if (error.syscall !== 'listen') {
            throw error;
        }
        const bind = typeof DEFAULT_PORT === 'string' ? `Pipe ${DEFAULT_PORT}` : `Port ${DEFAULT_PORT}`;
        // handle specific listen errors with friendly messages
        switch (error.code) {
            case 'EACCES':
                console.error(`${bind} requires elevated privileges`); // eslint-disable-line
                process.exit(1);
                break;
            case 'EADDRINUSE':
                console.error(`${bind} is already in use`); // eslint-disable-line
                process.exit(1);
                break;
            default:
                throw error;
        }
    });
})();
//# sourceMappingURL=mocker.js.map